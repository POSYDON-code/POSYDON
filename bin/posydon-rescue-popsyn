#!/usr/bin/env python
# script to rescue failed popsyn job arrays
# Author: Sylvia Biscoveanu
import argparse 
import glob
import os

def rescue_runs(rundir, time, mem_per_cpu):
    submit_scripts = glob.glob(os.path.join(rundir, '*slurm_array.slurm'))
    rescue_number = len(glob.glob(os.path.join(rundir, 'slurm_submit_rescue*.sh'))) + 1
    complete_Zs = []
    for script in submit_scripts:
        base = script.split('slurm_array.slurm')[0]
        outdir = base+'batches'
        if os.path.exists(outdir):
            sub_file = open(script, 'r')
            new_file_name = f'{script}.rescue{rescue_number}' 
            new_sub_file = open(new_file_name, 'w')
            for line in sub_file:
                if '--array' in line:
                    numbers = line.split('=')[1]
                    brange = ('-' in numbers)
                    blist = (',' in numbers)
                    if brange:
                        minimum = int(numbers.split('-')[0])
                        maximum = int(numbers.split('-')[-1])
                        inds = range(minimum, maximum+1)
                    elif blist:
                        inds = [int(s) for s in numbers.split(',')]
                    missing = []
                    for run in inds:
                        if not os.path.exists(os.path.join(outdir, f'evolution.combined.{run}')):
                            missing.append(run)
                    missing_str = ','.join(map(str, missing))
                    new_sub_file.write(f'#SBATCH --array={missing_str}\n')
                elif ('--time' in line) and (time is not None):
                    split_times = time.split(':')
                    bad_time_format = False
                    if len(split_times) != 3:
                        bad_time_format = True
                    elif not all([st.isdigit() for st in split_times]):
                        bad_time_format = True
                    if bad_time_format:
                        os.remove(new_file_name)
                        raise ValueError('--time must be in the format HH:MM:SS, ' 
                                         f'instead {time} was passed!')
                    else:
                        new_sub_file.write(f'#SBATCH --time={time}\n')
                elif ('--mem-per-cpu' in line) and (mem_per_cpu is not None):
                    if not mem_per_cpu.split('G')[0].isdigit():
                        os.remove(new_file_name)
                        raise ValueError('--mem-per-cpu must be in the format XG, '
                                         f'instead {mem_per_cpu} was passed!')
                    else:
                        new_sub_file.write(f'#SBATCH --mem-per-cpu={mem_per_cpu}\n')
                else:
                    new_sub_file.write(line)
        else:
            complete_Zs.append(base.split('/')[-1].split('_')[0])
    master_submit = open(os.path.join(rundir, 'slurm_submit.sh'), 'r')
    master_rescue_filename = f'slurm_submit_rescue{rescue_number}.sh'
    master_rescue = open(os.path.join(rundir, master_rescue_filename), 'w')
    for line in master_submit:
        if any(Z in line for Z in complete_Zs):
            continue
        else:
            new_line = line.replace('array.slurm', f'array.slurm.rescue{rescue_number}')
            master_rescue.write(new_line)
    print(f'Now run:\n\tcd {rundir}; bash {master_rescue_filename}')
                
if __name__=='__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--rundir', default='./', help='directory where the jobs originally ran')
    parser.add_argument('--time', default=None, help='overwrite time in the slurm_array.slurm files, in format HH:MM:SS')
    parser.add_argument('--mem-per-cpu', default=None, help='overwrite mem-per-cpu in the slurm_array.slurm files, in format XG')
    args = parser.parse_args()
    rescue_runs(**vars(args))
