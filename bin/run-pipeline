'''

MESA low_res_grids were run.

STEP 1: grid slice creation (PARALLELISED)

grid_type, metallicity, grid_slices, compression
'HMS-HMS', '1e-01_Zsun', LITE/ORIGINAL
['grid_low_res_0','grid_low_res_1','grid_low_res_2',
'grid_low_res_3','grid_low_res_4','grid_low_res_5',
'grid_random_1'] ---> output *.h5

STEP 2: grid concatenation
[['grid_low_res_0','grid_low_res_1','grid_low_res_2',
'grid_low_res_3','grid_low_res_4','grid_low_res_5']] -->
grid_low_res_combined

STEP 3: plot grid slices
---> loop all plot types
---> chek failure rate

STEP 4: rerun grid with fix A
grid_low_res_combined.rerun(index=logic) --> grid_rerun_1/grid.csv
                                        --> grid_random_1_rerun_1/grid.csv
---- MEN/WOMEN POWER will run reruns ----

call STEP 1: ['grid_rerun_1','grid_random_1_rerun_1',] --> *.h5
call STEP 2: [['grid_low_res_combined','grid_rerun_1'],
              ['grid_random_1','grid_random_rerun_1']]
              ---> gird_low_res_combined_rerun_1.h5
                   grid_random_1_rerun_1.h5
call STEP 3: rerun grid with fix B
........ --> grid_rerun_2/grid.csv, call STEP 1, 2.. 3

STEP 5:
do post processing on the ORIGINAL grids and append back on
LITE/ORIGINAL for both grid_low_res_combined_rerun_N and grid_random_1_rerun_N

STEP 6:
train interpolators


I NEED TO REGENERATE THE GRIDS AFTER A PR

STEP 1:
'HMS-HMS', '1e-01_Zsun', LITE/ORIGINAL
['grid_low_res_0','grid_low_res_1','grid_low_res_2',
'grid_low_res_3','grid_low_res_4','grid_low_res_5',
'grid_random_1','grid_low_res_rerun_1', 'grid_low_res_rerun_2',
'grid_low_res_rerun_3']
STEP 2:
[
['grid_low_res_0','grid_low_res_1','grid_low_res_2',
'grid_low_res_3','grid_low_res_4','grid_low_res_5'], --> grid_low_combined.h5
['grid_low_combined','grid_low_res_rerun_1'], ---> grid_low_res_combined_rerun_1.h5
['grid_low_res_combined_rerun_1','grid_rerun_2'], ---> grid_low_res_combined_rerun_2.h5
['grid_low_res_combined_rerun_2','grid_rerun_3'], ---> grid_low_res_combined_rerun_3.h5
['grid_low_random_1','grid_random_1_rerun_1'], ---> grid_low_res_combined_rerun_1.h5
['grid_low_random_1_rerun_1','grid_random_1_rerun_2'], ---> grid_low_res_combined_rerun_2.h5
['grid_low_random_1_rerun_2','grid_random_1_rerun_3'], ---> grid_low_res_combined_rerun_3.h5
]


'''

import os
import sys
import numpy as np
import pandas as pd
from collections import Counter
from posydon.grids.psygrid import (PSyGrid,
                                   join_grids,
                                   DEFAULT_HISTORY_DS_EXCLUDE,
                                   DEFAULT_PROFILE_DS_EXCLUDE,
                                   EXTRA_COLS_DS_EXCLUDE)

def create_grid_slice(i, step_1="step_1.csv", verbose=False):

    df = pd.read_csv(os.path.join(PATH, step_1))
    grid_path = df.loc[i,'path_to_grid']
    compression = df.loc[i,'compression']

    grid_name = grid_path.split('/')[-1]
    grid_output = os.path.join('/',os.path.join(*grid_path.split('/')[:-1]),
                                            compression,grid_name+'.h5')
    if verbose:
        print('processing ', grid_path)
        print('saving file ',  grid_output)

    if compression == 'ORIGINAL':
        history_DS_error = None
        profile_DS_error = None
        profile_DS_interval = None
        history_DS_exclude = DEFAULT_HISTORY_DS_EXCLUDE
        profile_DS_exclude = DEFAULT_PROFILE_DS_EXCLUDE
    elif compression == 'LITE':
        history_DS_error = 0.1
        profile_DS_error = 0.1
        profile_DS_interval = -0.005
        history_DS_exclude = EXTRA_COLS_DS_EXCLUDE
        profile_DS_exclude = EXTRA_COLS_DS_EXCLUDE
    else:
        raise ValueError('compression = %s not supported!'%compression)

    grid = PSyGrid(verbose=True)
    grid.create(grid_path,
                grid_output,
                overwrite=True,
                history_DS_error=history_DS_error,
                profile_DS_error=profile_DS_error,
                history_DS_exclude=history_DS_exclude,
                profile_DS_exclude=profile_DS_exclude,
                profile_DS_interval=profile_DS_interval,
                compression="gzip9",
                start_at_RLO=False,
                initial_RLO_fix=True)
    grid.close()


def combine_grid_slices(step_2="step_2.csv", verbose=False):

    df = pd.read_csv(os.path.join(PATH, step_2))

    for grid_combined_key in df.keys():
        gird_names = df[grid_combined_key].to_list()
        if verbose:
            print('Combinining: ', gird_names)
            print('into:', grid_combined_key)
        join_grids(gird_names, grid_combined_key)


def plot_grid(i, step_3="step_3.csv", verbose=False):

    df = pd.read_csv(os.path.join(PATH, step_3))
    grid_path = df.loc[i,'path_to_grid']
    plot_dir = df.loc[i,'path_to_plot']
    grid = PSyGrid(verbose=False)
    grid.load(grid_path)

    # TODO: mk plot directories
    # dirname = 'plots/'+str(sys.argv[1])+'/'
    # dirs=['plots/', dirname,
    #       dirname+'TF12/',dirname+'TF1/',dirname+'TF2/',dirname+'TF3/',dirname+'TF4/',
    #       dirname+'debug_mt/',dirname+'debug_rl_1/',dirname+'debug_rl_2/']
    # for dir_ in dirs:
    #     if not os.path.isdir(path.replace(version,'')+dir_):
    #         os.mkdir(dir_)

    if 'HMS-HMS' in grid_path:
        # mass ratio slices
        qs = np.linspace(0.05,1.,20)
        qs[-1] = 0.99

        for q in qs.tolist():
            # TODO: skip plotting slice if there are no data
            try:
                PLOT_PROPERTIES = {
                    'figsize' : (4,3.5),
                    'path_to_file' : os.path.join(plot_dir,'TF12/'),
                    'show_fig' : False,
                    'fname' : 'grid_q_%1.2f.png'%q,
                    'title' : '$q=%1.2f$'%q,
                    'log10_x' : True,
                    'log10_y' : True,
                    'legend2D' : {'bbox_to_anchor' : (1.03, 0.5)}
                }

                grid.plot2D('star_1_mass', 'period_days', None,
                             termination_flag='combined_TF12',
                             grid_3D=True, slice_3D_var_str='mass_ratio',
                             slice_3D_var_range=(q-2.5e-2,q+2.5e-2),
                             verbose=False, **PLOT_PROPERTIES)

                PLOT_PROPERTIES = {
                    'figsize' : (4,5),
                    'path_to_file' : os.path.join(plot_dir,'TF1/'),
                    'show_fig' : False,
                    'fname' : 'grid_q_%1.2f.png'%q,
                    'title' : '$q=%1.2f$'%q,
                    'log10_x' : True,
                    'log10_y' : True,
                    'zmin' : -8,
                    'zmax' : -1,
                    'legend2D' : {'bbox_to_anchor' : (1.03, 0.5)},
                    'colorbar': {'pad': 0.12}
                }

                grid.plot2D('star_1_mass', 'period_days', 'lg_mtransfer_rate',
                             termination_flag='termination_flag_1',
                             grid_3D=True, slice_3D_var_str='mass_ratio',
                             slice_3D_var_range=(q-2.5e-2,q+2.5e-2),
                             verbose=False, **PLOT_PROPERTIES)

                PLOT_PROPERTIES = {
                    'figsize' : (4,3.5),
                    'path_to_file' : os.path.join(plot_dir,'TF2/'),
                    'show_fig' : False,
                    'fname' : 'grid_q_%1.2f.png'%q,
                    'title' : '$q=%1.2f$'%q,
                    'log10_x' : True,
                    'log10_y' : True,
                    'legend2D' : {'bbox_to_anchor' : (1.03, 0.5)}
                }

                grid.plot2D('star_1_mass', 'period_days', None,
                             termination_flag='termination_flag_2',
                             grid_3D=True, slice_3D_var_str='mass_ratio',
                             slice_3D_var_range=(q-2.5e-2,q+2.5e-2),
                             verbose=False, **PLOT_PROPERTIES)

                PLOT_PROPERTIES = {
                    'figsize' : (4,3.5),
                    'path_to_file' : os.path.join(plot_dir,'TF3/'),
                    'show_fig' : False,
                    'fname' : 'grid_q_%1.2f.png'%q,
                    'title' : '$q=%1.2f$'%q,
                    'log10_x' : True,
                    'log10_y' : True,
                    'legend2D' : {'bbox_to_anchor' : (1.03, 0.5)}
                }

                grid.plot2D('star_1_mass', 'period_days', None,
                             termination_flag='termination_flag_3',
                             grid_3D=True, slice_3D_var_str='mass_ratio',
                             slice_3D_var_range=(q-2.5e-2,q+2.5e-2),
                             verbose=False, **PLOT_PROPERTIES)

                PLOT_PROPERTIES = {
                    'figsize' : (4,3.5),
                    'path_to_file' : os.path.join(plot_dir,'TF4/'),
                    'show_fig' : False,
                    'fname' : 'grid_q_%1.2f.png'%q,
                    'title' : '$q=%1.2f$'%q,
                    'log10_x' : True,
                    'log10_y' : True,
                    'legend2D' : {'bbox_to_anchor' : (1.03, 0.5)}
                }

                grid.plot2D('star_1_mass', 'period_days', None,
                             termination_flag='termination_flag_4',
                             grid_3D=True, slice_3D_var_str='mass_ratio',
                             slice_3D_var_range=(q-2.5e-2,q+2.5e-2),
                             verbose=False, **PLOT_PROPERTIES)

                PLOT_PROPERTIES = {
                    'figsize' : (4,5),
                    'path_to_file' : os.path.join(plot_dir,'debug_rl_1/'),
                    'show_fig' : False,
                    'fname' : 'grid_q_%1.2f.png'%q,
                    'title' : '$q=%1.2f$'%q,
                    'log10_x' : True,
                    'log10_y' : True,
                    'zmin' : -0.5,
                    'zmax' : 0.5,
                    'legend2D' : {'bbox_to_anchor' : (1.03, 0.5)},
                    'colorbar': {'pad': 0.12}
                }

                grid.plot2D('star_1_mass', 'period_days', 'rl_relative_overflow_1',
                             termination_flag='debug',
                             grid_3D=True, slice_3D_var_str='mass_ratio',
                             slice_3D_var_range=(q-2.5e-2,q+2.5e-2),
                             verbose=False, **PLOT_PROPERTIES)

                PLOT_PROPERTIES = {
                    'figsize' : (4,5),
                    'path_to_file' : os.path.join(plot_dir,'debug_rl_2/'),
                    'show_fig' : False,
                    'fname' : 'grid_q_%1.2f.png'%q,
                    'title' : '$q=%1.2f$'%q,
                    'log10_x' : True,
                    'log10_y' : True,
                    'zmin' : -0.5,
                    'zmax' : 0.5,
                    'legend2D' : {'bbox_to_anchor' : (1.03, 0.5)},
                    'colorbar': {'pad': 0.12}
                }

                grid.plot2D('star_1_mass', 'period_days', 'rl_relative_overflow_2',
                             termination_flag='debug',
                             grid_3D=True, slice_3D_var_str='mass_ratio',
                             slice_3D_var_range=(q-2.5e-2,q+2.5e-2),
                             verbose=False, **PLOT_PROPERTIES)

                PLOT_PROPERTIES = {
                    'figsize' : (4,5),
                    'path_to_file' : os.path.join(plot_dir,'debug_mt/'),
                    'show_fig' : False,
                    'fname' : 'grid_q_%1.2f.png'%q,
                    'title' : '$q=%1.2f$'%q,
                    'log10_x' : True,
                    'log10_y' : True,
                    'zmin' : -8,
                    'zmax' : -1,
                    'legend2D' : {'bbox_to_anchor' : (1.03, 0.5)},
                    'colorbar': {'pad': 0.12}
                }

                grid.plot2D('star_1_mass', 'period_days', 'lg_mtransfer_rate',
                             termination_flag='debug',
                             grid_3D=True, slice_3D_var_str='mass_ratio',
                             slice_3D_var_range=(q-2.5e-2,q+2.5e-2),
                             verbose=False, **PLOT_PROPERTIES)
            except Exception as e:
                print('FAILED TO PLOT q=%s!'%q)
                print('')
                print(e)
                continue

def check_failure_rate(i, step_3="step_3.csv", verbose=False):

    df = pd.read_csv(os.path.join(PATH, step_3))
    grid_path = df.loc[i,'path_to_grid']
    plot_dir = df.loc[i,'path_to_plot']
    grid = PSyGrid(verbose=False)
    grid.load(grid_path)

    count = Counter(grid.final_values['interpolation_class'])
    n = 0.
    for key in count.keys():
        n += count[key]
    print('Failure rate', round(count['not_converged']/n*100,2),'%')

def export_dataset():
    # this fucntion should copy all the files to a directory
    # for POSYDON pop synth
    pass


if __name__ == '__main__':

    PATH_TO_GRIDS = '/projects/b1119/POSYDON_GRIDS/'
    PATH = '.'
    VERBOSE = True

    # JOB ARRAY
    CREATE_GRID_SLICES = False
    if CREATE_GRID_SLICES:
        # chose grid slice given the slurm jobarray index
        i = int(sys.argv[1])
        create_grid_slice(i, verbose=VERBOSE)

    # SINGLE JOB
    # TODO: make LITE/ORIGINAL version parallel with a JOB ARRAY
    COMBINE_GRID_SLICES = False
    if COMBINE_GRID_SLICES:
        combine_grid_slices(verbose=VERBOSE)

    # JOB ARRAY
    PLOT_GRIDS = True
    if PLOT_GRIDS:
        i = int(sys.argv[1])
        plot_grid(i, verbose=VERBOSE)

    CHECK_FAILURE_RATE = True:
    if CHECK_FAILURE_RATE:
        i = int(sys.argv[1])
        check_failure_rate(i, verbose=VERBOSE)

    # SINGLE JOB
    # train_interpolators()

# python pipleline.py
